{{! Use the main layout }}
{{!< main }}

{{! New Post Submission Form }}
<section class="content-container">
    {{#if loggedIn}}
        <!-- show the create post form when logged in -->
        <section class="post-form">
            <!-- make a header here -->
            <form action="/posts" method="POST">
                <!-- title input field name = "title" -->
                <!-- text area input field name = "content" -->
                <input type="text" name="title" placeholder="Post title" required>
                <textarea name="content" id="post-content" placeholder="What's on your mind?" required></textarea>

                <div class="form-actions">
                    <button type="button" class="emoji-button" onclick="toggleEmojiPanel()">ðŸ˜€</button>
                    <button type="button" class="giphy-button" onclick="toggleGiphyPanel()">GIF</button>
                    <button type="submit" class="post-button">Post</button>
                </div>
            </form>

            <div id="emoji-container" class="emoji-panel" style="display: none;">
                <!-- input field for the emoji search, use oninput="searchEmojis() -->
                <!-- a div, id = "emoji-grid" -->
                <input type="text" id="emoji-search" oninput="searchEmojis()" placeholder="Search emojis...">
                <div id="emoji-grid"></div>
            </div>

            <div id="giphy-container" class="giphy-panel" style="display: none;">
                <input type="text" id="giphy-search" oninput="searchGiphy()" placeholder="Search GIFs...">
                <div id="giphy-grid"></div>
            </div>
        </section>
    {{/if}}

    <section class="posts-list">
        <!-- Sorting options -->
        <div class="sort-options">
            <label for="sort-by">Sort by:</label>
            <select id="sort-by" onchange="sortPosts()">
                <option value="recency" {{#if (eq sort 'recency')}}selected{{/if}}>Recent</option>
                <option value="likes" {{#if (eq sort 'likes')}}selected{{/if}}>Likes</option>
            </select>
        </div>

        <!-- recent posts -->
        {{#if posts.length}}
        <ul>
            {{#each posts}}
                <!-- you have to pass the user in to posts and this is the syntax -->
                {{> post this user=../user}}    
            {{/each}}
        </ul>
        {{else}}
            <!-- no posts, oh no, what now? -->
            <div>No posts to display. Start the conversation!</div>
        {{/if}}
    </section>
</section>

{{! JavaScript for Emoji Integration }}
<script>

/*
 You want to show a subset of the emojis. About 200. However,
 you also want the user to be able to search all emojis,
 so, put them in this array when the array is empty so 
 that you have them.
*/

let allEmojis = [];  // Global list to hold all emojis

async function toggleEmojiPanel() {
    const container = document.getElementById('emoji-container');
    container.style.display = container.style.display === 'none' ? 'block' : 'none';

    if(container.style.display === 'block' && allEmojis.length == 0){
        // go "Fetch" you some emojis and show them off with displayEmojies
        try {
            const response = await fetch('https://emoji-api.com/emojis?access_key=ae96da67fe8bcbff7de6df540b5f7532f6c9ee61');
            const data = await response.json();
            allEmojis = data;
            displayEmojis(allEmojis);
        } catch (error) {
            console.error('Failed to fetch emojis:', error);
        }
    }
}

function displayEmojis(emojis, limit=200) {
    const container = document.getElementById('emoji-grid');
    container.innerHTML = '';  // Clear previous results
    if (Array.isArray(emojis) && emojis.length > 0) {
        emojis.slice(0, limit).forEach(emoji => {
            const emojiElement = document.createElement('span');
            emojiElement.textContent = emoji.character;
            emojiElement.title = emoji.slug;  // Showing the emoji name on hover
            emojiElement.style.cursor = 'pointer';
            emojiElement.onclick = () => insertEmoji(emoji.character);
            container.appendChild(emojiElement);
        });
    } else {
        container.textContent = 'No emojis found. Try a different search!';
    }
}

function searchEmojis() {
    const searchTerm = document.getElementById('emoji-search').value.toLowerCase();
    // array.filter takes a predicate
    // use string.includes. 

    const filteredEmojis = allEmojis.filter(emoji => emoji.slug.includes(searchTerm));
    
    displayEmojis(filteredEmojis);
}

function insertEmoji(emoji) {
    // put an emoji on a form somehow. 
    const textarea = document.getElementById('post-content');
    // do this when you're doing getting the emoji on the form
    //
    textarea.value += emoji;
    textarea.focus();  // Keep focus on the textarea
}

function sortPosts() {
    const sortBy = document.getElementById('sort-by').value;
    window.location.href = `/?sort=${sortBy}`;
}

// Toggle Giphy Panel
function toggleGiphyPanel() {
    const container = document.getElementById('giphy-container');
    container.style.display = container.style.display === 'none' ? 'block' : 'none';
}

// Search Giphy API
async function searchGiphy() {
    const searchTerm = document.getElementById('giphy-search').value;
    const apiKey = '7BS5cGrVSxieaiVZy9Yh7Qsuy0whHF5F';
    const url = `https://api.giphy.com/v1/gifs/search?api_key=${apiKey}&q=${searchTerm}&limit=25&offset=0&rating=g&lang=en`;

    try {
        const response = await fetch(url);
        const data = await response.json();
        displayGiphyResults(data.data);
    } catch (error) {
        console.error('Failed to fetch GIFs:', error);
    }
}

// Display Giphy Results
function displayGiphyResults(gifs) {
    const container = document.getElementById('giphy-grid');
    container.innerHTML = '';  // Clear previous results

    gifs.forEach(gif => {
        const gifElement = document.createElement('img');
        gifElement.src = gif.images.fixed_height.url;
        gifElement.alt = gif.title;
        gifElement.style.cursor = 'pointer';
        gifElement.onclick = () => insertGif(gif.images.fixed_height.url);
        container.appendChild(gifElement);
    });
}

// Insert GIF into Post Content
function insertGif(gifUrl) {
    const textarea = document.getElementById('post-content');
    textarea.value += `<img src="${gifUrl}" alt="GIF">\n`;
    textarea.focus();
}
</script>

